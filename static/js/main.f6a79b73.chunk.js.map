{"version":3,"sources":["Components/BookingForm.js","Components/Modal.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["BookingForm","props","onSubmit","handleConfirm","className","type","name","value","info","firstName","onChange","handleChange","required","lastName","email","address","rooms","adults","nights","Modal","this","isModal","onClick","closeModal","React","Component","Header","App","state","bind","event","preventDefault","setState","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6a79b73.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction BookingForm(props){\n    return(\n        <form onSubmit={props.handleConfirm} className=\"d-flex justify-content-around flex-wrap\">\n            <div className=\"form-group\">\n                <label>First Name: \n                    <input type=\"text\" name=\"firstName\" className=\"form-control form-control-sm\" value={props.info.firstName} onChange={props.handleChange} required></input>\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <label>Last Name: \n                    <input type=\"text\" name=\"lastName\" className=\"form-control form-control-sm\" value={props.info.lastName} onChange={props.handleChange} required></input>\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <label>Email: \n                    <input type=\"email\" name=\"email\" className=\"form-control form-control-sm\" value ={props.info.email} onChange={props.handleChange} required></input>\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <label>Address: \n                    <input type=\"text\" name=\"address\" className=\"form-control form-control-sm\" value={props.info.address} onChange={props.handleChange} required></input>\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <label>Rooms: \n                    <select name=\"rooms\" className=\"form-control form-control-sm\" value={props.info.rooms} onChange={props.handleChange} required>\n                        <option value=\"\">Select Number of Rooms</option>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                    </select>\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <label>Adults: \n                    <select name=\"adults\" className=\"form-control form-control-sm\" value={props.info.adults} onChange={props.handleChange} required>\n                        <option value=\"\">Select Number of Adults</option>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                    </select>\n                </label>\n            </div>\n            <div className=\"form-group\">\n                <label>Nights: \n                    <select name=\"nights\" className=\"form-control form-control-sm\" value={props.info.nights} onChange={props.handleChange} required>\n                        <option value=\"\">Select Number of Nights</option>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option>\n                        <option value=\"7\">7</option>\n                    </select>\n                </label>\n            </div>\n            <div className=\"break\"></div>\n            <button type=\"submit\" className=\"btn btn-sm confirm-btn\">Confirm Reservation</button>\n        </form>\n    )\n}\n\nexport default BookingForm;","import React from \"react\";\nimport \"./modal.css\"\n\nclass Modal extends React.Component{\n    render(){\n        if (!this.props.isModal){\n            return null;\n        }\n        return (\n            <div className=\"confirmation-modal\">\n                <div className=\"modal-content\">\n                    <button className=\"close\" onClick={this.props.closeModal}> \n                        &times;\n                    </button>\n                    <div className=\"text-center\">\n                        <h1>Reservation Confirmed</h1>\n                        <p>Reservation set for {this.props.info.firstName} {this.props.info.lastName} of {this.props.info.address}</p>\n                        <p>{this.props.info.rooms} Rooms for {this.props.info.nights} Nights</p>\n                        <p>Number of Guests: {this.props.info.adults}</p>\n                        <p>A confirmation e-mail has been sent to {this.props.info.email}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Modal","import React from \"react\"\n\nfunction Header (){\n    return(\n        <div className=\"text-center\">\n            <h1>Three Rivers Resort</h1>\n            <h4>Pittsburgh's Finest Luxury Vacation Destination</h4>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Components/BookingForm'\nimport BookingForm from './Components/BookingForm';\nimport Modal from './Components/Modal';\nimport Header from './Components/Header';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n\n    this.state = {\n        firstName: \"\", \n        lastName: \"\", \n        email: \"\",\n        address: \"\", \n        rooms: 0, \n        adults: 0, \n        nights: 0, \n        isModal: false\n    }\n    this.handleConfirm = this.handleConfirm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  handleConfirm(event){\n    event.preventDefault();\n    this.setState({\n      isModal: false,    \n    })\n    \n  }\n\n  handleChange(event){\n    const {name, value} = event.target;\n    this.setState({\n      [name] : value\n    })\n  }\n\n  closeModal(){\n    this.setState({\n      isModal:false,\n      firstName: \"\", \n      lastName: \"\", \n      email: \"\",\n      address: \"\", \n      rooms: 0, \n      adults: 0, \n      nights: 0\n      \n    })\n  }\n\n  render(){\n    return (\n      <div className=\"w-50 p-3 mx-auto justify-content-center\" >\n        <Header/>\n        <BookingForm info={this.state} handleConfirm={this.handleConfirm} handleChange={this.handleChange} />\n        <Modal closeModal={this.closeModal} isModal={this.state.isModal} info={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}